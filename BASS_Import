Option Explicit

Public NextRun

' Экспорт bas файла.
' добавь в книгу для которой нужно срабатывать
'
'Private Sub Workbook_Open()
'    If Application.UserName = "InExSu" Then
'
'        Timer_Start
'
'    End If
'End Sub

'Private Sub Workbook_BeforeClose(Cancel As Boolean)
'   If Application.UserName = "InExSu" Then
'
'        Timer_Stop
'
'    End If
'End Sub

' Autogenerated with DRAKON Editor 1.31

Function BASS_Import_OnTime_Action()
    ' есть отдельный файл BASS_Import_OnTime.drn
    ' item 16
    Const SH_NAME$ = "BASS_Import_Time"
    ' item 34
    Dim a2()           As Variant
    Dim fileV          As Variant
    Dim files_Dict     As New Dictionary
    Dim r              As Range
    Dim records_Dict   As New Dictionary
    Dim record_Change  As Boolean
    Dim sh             As Worksheet
    Dim time_File      As Date
    Dim time_Record    As Date
    ' item 11
    If Sheet_Exists( _
        ThisWorkbook, _
        SH_NAME$) Then
        ' item 15
        Set sh = ThisWorkbook.Worksheets(SH_NAME$)
        
        Set files_Dict = _
            Files_Times_Mask_Dictionary( _
            ThisWorkbook.path & "\*.bas")
        ' item 17
        If files_Dict.count > 0 Then
            ' item 20
            Set r = sh.UsedRange
            
            a2 = Range_2_A2(r)
            
            Set records_Dict = A2_Records_2_Dict(a2)
            ' item 21
            For Each fileV In files_Dict.Keys
                ' item 23
                If records_Dict.Exists(fileV) Then
                    ' item 26
                    time_File = files_Dict(fileV)
                
                    time_Record = records_Dict(fileV)
                    ' item 27
                    If time_Record >= time_File Then
                        ' item 35
                        ' Модулю обновление НЕ нужно
                    Else
                        ' item 31
                        ImportBasFile CStr(fileV)
                        ' item 32
                        ' Запись обновить
                    
                        records_Dict(fileV) = time_File
                    
                        record_Change = True
                    End If
                Else
                    ' item 31
                    ImportBasFile CStr(fileV)
                    ' item 32
                    ' Запись обновить
                
                    records_Dict(fileV) = time_File
                
                    record_Change = True
                End If
                ' item 22
            Next fileV
            ' item 43
            If record_Change Then
                ' item 30
                ' словарь в массив 2мерный
                
                a2 = Dict_2_A2(records_Dict)
                ' item 33
                A22R a2, sh.Cells(1)
            Else
                
            End If
        Else
            
        End If
    Else
        ' item 40
        Timer_Stop
        ' item 14
        Err.Raise vbObjectError + 1000, , _
            "НЕ найден лист " & SH_NAME
    End If
    ' item 37
    If Err.Number Then
        
    Else
        ' item 41

        'если надо включи Timer_Start
    End If
End Function


Sub ImportBasFileS(path$, mask$)
    ' импорт всех bas файлов

    Dim files_Dict As New Dictionary
    Dim file_name As Variant
    Dim from$, to_$

    Set files_Dict = Files_Times_Mask_Dictionary(path$ & mask$)
    
    For Each file_name In files_Dict.Keys
        
        ImportBasFile CStr(file_name)
        

        from$ = Replace$(file_name, ".bas", ".drn")

        to_$ = Replace$(file_name, ThisWorkbook.path, ThisWorkbook.path & "\drn_BackUps")
        to_$ = Replace$(to_$, ".bas", ".drn")
        
        to_$ = FullNameAddDateTime(to_$, "")
        
        File_Copy from$, to_$

    Next
    
End Sub

Sub ImportBasFile(filePath As String)
    Dim tempFilePath As String
    Dim vbProj As Object ' VBIDE.VBProject
    Dim vbComp As Object 'VBIDE.VBComponent
    Dim moduleName As String

    DoEvents
    Module_Delete_By_Name "Module1"

    ' Извлекаем имя модуля из имени файла
    moduleName = Mid(filePath, InStrRev(filePath, "\") + 1, InStrRev(filePath, ".") - InStrRev(filePath, "\") - 1)

    ' Временный файл для перекодирования
    tempFilePath = Environ("TEMP") & Application.PathSeparator & moduleName & "_converted.bas"

    ' Перекодируем файл в Windows-1251
    ConvertFileToWindows1251 filePath, tempFilePath

    ' Получаем ссылку на текущий проект VBA
    Set vbProj = ThisWorkbook.VBProject

    ' удалить существующий модуль с таким же именем (если есть)
    Module_Delete_By_Name moduleName
    ' Импортируем перекодированный .bas файл в проект
    DoEvents
    Set vbComp = vbProj.VBComponents.Import(tempFilePath)

    ' Переименовываем импортированный модуль
    DoEvents
    vbComp.name = moduleName
    
    ' Удаляем временный файл
    Kill tempFilePath
End Sub


Sub ConvertFileToWindows1251(inputFilePath As String, outputFilePath As String)
    Dim inputStream As Object, outputStream As Object
    
    ' Создаем объекты ADODB.Stream
    Set inputStream = CreateObject("ADODB.Stream")
    Set outputStream = CreateObject("ADODB.Stream")
    
    ' Настройка inputStream для чтения UTF-8 файла
    With inputStream
        .Type = 2 ' adTypeText
        .charSet = "utf-8"
        .Open
        .LoadFromFile inputFilePath
    End With
    
    ' Настройка outputStream для записи в Windows-1251
    With outputStream
        .Type = 2 ' adTypeText
        .charSet = "windows-1251"
        .Open
        .WriteText inputStream.ReadText
        .SaveToFile outputFilePath, 2 ' adSaveCreateOverWrite
    End With
    
    ' Закрываем потоки
    inputStream.Close
    outputStream.Close
End Sub

Sub File_Copy(sourceFilePath As String, destinationFilePath As String)
    Dim FSO As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")
    
    ' Копируем файл
    DoEvents
    On Error Resume Next
    FSO.CopyFile sourceFilePath, destinationFilePath

    If Err.Number Then
        Debug.Print "Не скопировался файл " & sourceFilePath & " в " & destinationFilePath
    End If
End Sub

Function FullNameAddDateTime( _
    fileName As String, _
    Optional pathAdd As String = "_Versions") As String
    ' В полном пути к имени файла добавляет текущие дату и время
    ' из "c:\1\fileName.xls" сделает "c:\1\_Versions\fileName 2023-06-18 13-11.xls"
    
    Dim path As String
    Dim name As String
    Dim ext As String
    Dim dateTime As String
    
    ' Получаем путь, имя файла и расширение
    path = Left(fileName, InStrRev(fileName, Application.PathSeparator))
    name = Mid(fileName, InStrRev(fileName, Application.PathSeparator) + 1, InStrRev(fileName, ".") - InStrRev(fileName, Application.PathSeparator) - 1)
    ext = Mid(fileName, InStrRev(fileName, ".") + 1)
    
    ' Добавляем дату и время к имени файла
    dateTime = Format$(Now, "yyyy-mm-dd hh-nn")
    name = name & " " & dateTime
    
    ' Формируем полный путь к новому файлу
    FullNameAddDateTime = path & pathAdd & Application.PathSeparator & name & "." & ext
End Function

Sub FullNameAddDateTime_Test()
    Dim originalFileName As String
    Dim newFileName As String
    Dim expectedPath As String
    Dim namePart As String
    Dim extPart As String
    Dim dateTimePattern As String
    
    ' Пример теста
    originalFileName = "c:\1\fileName.xls"
    newFileName = FullNameAddDateTime(originalFileName)
    
    ' Проверка, что новый путь содержит ожидаемую поддиректорию
    expectedPath = "c:\1\_Versions\"
    Debug.Assert Left(newFileName, Len(expectedPath)) = expectedPath
    
    ' Проверка, что имя файла содержит правильную дату и время
    namePart = Mid(newFileName, Len(expectedPath) + 1, Len(newFileName) - Len(expectedPath) - Len(".xls"))
    extPart = Right(newFileName, 3)
    dateTimePattern = "####-##-## ##-##"
    
    ' Разделяем имя файла и дату/время
    Dim splitNameParts() As String
    splitNameParts = Split(namePart, " ")
    
    ' Проверка, что имя и дата/время присутствуют и корректны
    Debug.Assert UBound(splitNameParts) = 2
    Debug.Assert splitNameParts(0) = "fileName"
    Debug.Assert splitNameParts(1) Like "####-##-##"
    
    Debug.Assert extPart = "xls"
    
    ' Дополнительные тесты
    originalFileName = "c:\path\to\anotherFile.txt"
    newFileName = FullNameAddDateTime(originalFileName)
    expectedPath = "c:\path\to\_Versions\"
    Debug.Assert Left(newFileName, Len(expectedPath)) = expectedPath
    namePart = Mid(newFileName, Len(expectedPath) + 1, Len(newFileName) - Len(expectedPath) - Len(".txt"))
    extPart = Right(newFileName, 3)
    
    splitNameParts = Split(namePart, " ")
    Debug.Assert UBound(splitNameParts) = 2
    Debug.Assert splitNameParts(0) = "anotherFile"
    Debug.Assert splitNameParts(1) Like "####-##-##"
    
    Debug.Assert extPart = "txt"
    
    ' Проверка для файла без расширения
    originalFileName = "c:\path\to\.gitignore"
    newFileName = FullNameAddDateTime(originalFileName)
    expectedPath = "c:\path\to\_Versions\"
    Debug.Assert Left(newFileName, Len(expectedPath)) = expectedPath
    namePart = Mid(newFileName, Len(expectedPath) + 1, Len(newFileName) - Len(expectedPath))
    
    splitNameParts = Split(namePart, " ")
    Debug.Assert UBound(splitNameParts) = 2
    '    Debug.Assert splitNameParts(0) = ".gitignore"
    Debug.Assert splitNameParts(1) Like "####-##-##"
    
    ' Выводим сообщение об успешном завершении тестов
    Debug.Print "All tests passed!"
End Sub

Function Sheet_Exists(book As Workbook, sheetName As String)
    ' существует ли в книге book лист с именем sheetName
    On Error Resume Next
    Sheet_Exists = Not book.Sheets(sheetName) Is Nothing
End Function

Function Range_2_A2(rnge As Range) As Variant()
    ' диапазон в массив
    
    ReDim a2(1 To 1, 1 To 1)
    If Not rnge Is Nothing Then
        If rnge.Cells.count = 1 Then
            a2(1, 1) = rnge.Cells(1).value
        Else
            a2 = rnge.value
        End If
    End If
        
    Range_2_A2 = a2
End Function

Function Files_Times_Mask_Dictionary(mask As String) As Dictionary
    Dim FSO As Object
    Dim folder As Object
    Dim file As Object
    Dim fileList As New Dictionary
    Dim path As String
    Dim pattern As String

    ' Получаем путь и шаблон из маски
    path = Left(mask, InStrRev(mask, "\"))
    pattern = Mid(mask, InStrRev(mask, "\") + 1)
    
    ' Инициализация FileSystemObject
    Set FSO = CreateObject("Scripting.FileSystemObject")
    
    ' Получаем объект папки
    DoEvents
    Set folder = FSO.GetFolder(path)
    
    ' Перебираем файлы в папке
    For Each file In folder.files
        ' Проверяем соответствие шаблону
        If file.name Like pattern Then
            
            fileList.Add path & file.name, file.DateLastModified

        End If
    Next file

    Set Files_Times_Mask_Dictionary = fileList

End Function

Sub Files_Times_Mask_Dictionary_Test()
    Dim files As Dictionary
    Dim file As Variant
    Dim mask As String

    ' Укажите путь и маску
    mask = ThisWorkbook.path & "\*.bas"

    ' Получаем список файлов
    Set files = Files_Times_Mask_Dictionary(mask)

    ' Выводим список файлов в окно сообщений
    For Each file In files.Keys
        Debug.Print file, files(file)
    Next file
End Sub

Function A2_Records_2_Dict(a2() As Variant) As Dictionary
    ' словарь записей в массив

    Dim dict As New Dictionary

    If UBound(a2, 2) < 2 Then

        Set A2_Records_2_Dict = dict

        Exit Function

    End If

    Dim row&
    Dim file$
    Dim timeD As Date

    For row& = 1 To UBound(a2, 1)

        file$ = a2(row&, 1)
    
        timeD = a2(row&, 2)
    
        dict.Add file$, timeD

    Next

    Set A2_Records_2_Dict = dict

End Function

Sub A2_Records_2_Dict_Test()
    ' Создаем тестовый массив данных
    Dim testArray(1 To 3, 1 To 2) As Variant
    testArray(1, 1) = "file1"
    testArray(1, 2) = #1/1/2022#
    testArray(2, 1) = "file2"
    testArray(2, 2) = #1/2/2022#
    testArray(3, 1) = "file3"
    testArray(3, 2) = #1/3/2022#
    
    ' Вызываем функцию для преобразования массива в словарь
    Dim resultDict As Dictionary
    Set resultDict = A2_Records_2_Dict(testArray)
    
    ' Проверяем результаты
    Debug.Assert resultDict.Exists("file1")
    Debug.Assert resultDict.Exists("file2")
    Debug.Assert resultDict.Exists("file3")
    
    Debug.Assert resultDict("file1") = #1/1/2022#
    Debug.Assert resultDict("file2") = #1/2/2022#
    Debug.Assert resultDict("file3") = #1/3/2022#
    
    ' Проверяем на пустой массив
    Dim emptyArray(1 To 1, 1 To 1) As Variant
    Set resultDict = A2_Records_2_Dict(emptyArray)
    Debug.Assert resultDict.count = 0

    Debug.Print "Все тесты прошли успешно!"
End Sub

Function Dict_2_A2(dict As Dictionary) As Variant()
    ' создаёт двумерный массив из словаря

    ReDim a2(1 To dict.count, 1 To 2) As Variant
    Dim row As Long, key As Variant

    row = 1
    For Each key In dict.Keys
        a2(row, 1) = key
        a2(row, 2) = dict(key)
        row = row + 1
    Next

    Dict_2_A2 = a2
End Function


Sub Dict_2_A2_Test()
    ' Создаем и заполняем словарь
    Dim dict As New Dictionary
    dict.Add "Key1", "Value1"
    dict.Add "Key2", "Value2"
    dict.Add "Key3", "Value3"
    
    ' Преобразуем словарь в двумерный массив
    Dim result As Variant
    result = Dict_2_A2(dict)
    
    ' Проверяем размерность массива
    Debug.Assert UBound(result, 1) = dict.count
    Debug.Assert UBound(result, 2) = 2
    
    ' Проверяем содержимое массива
    Dim i As Long
    For i = 1 To UBound(result, 1)
        Debug.Assert result(i, 1) = "Key" & i
        Debug.Assert result(i, 2) = "Value" & i
    Next i
    
End Sub

Sub Timer_Start()

    ' === Private NextRun As Double в начало модуля

    ' пример запуска метода регулярно, через каждый период времени
    ' Запускаем таймер, который будет выполнять макрос через 5 секунд

    NextRun = Now + TimeValue("00:00:05")

    Application.OnTime NextRun, "BASS_Import_OnTime_Action"

End Sub

Sub Timer_Stop()
    ' Для остановки таймера, который был установлен
    ' с помощью метода Application.OnTime, нужно использовать
    ' ту же самую дату и время, что и при его установке.

    On Error Resume Next

    Application.OnTime NextRun, "BASS_Import_OnTime_Action", , False

End Sub


Sub FormatSpecificRows()

    ' на листе 1 есть строки нужных мне форматорв.
    ' на листе 2 строки которые нужно отформатировать.
    ' НА листе 2 строки 1, 3,4 нужно отформатировать форматом из строки 1 листа 1,
    ' НА листе 2 строки 2,5,6 форматом строки 2 из листа 1/
    ' Закономерности в номерах строк для форматирования нет

    Dim ws1 As Worksheet
    Dim ws2 As Worksheet
    Dim rngSource1 As Range
    Dim rngSource2 As Range
    Dim rngTarget As Range
    Dim rowsToFormat1 As Variant
    Dim rowsToFormat2 As Variant
    Dim i As Long
    
    '    Задаем листы
    Set ws1 = ThisWorkbook.Sheets("Лист1")
    Set ws2 = ThisWorkbook.Sheets("Лист2")
    
    '    Задаем диапазоны исходных форматов
    Set rngSource1 = ws1.rows(1)
    Set rngSource2 = ws1.rows(2)
    
    '    Указываем номера строк для форматирования
    rowsToFormat1 = Array(1, 3, 4)
    rowsToFormat2 = Array(2, 5, 6)
    
    '    Форматирование строк по первому формату
    For i = LBound(rowsToFormat1) To UBound(rowsToFormat1)
        Set rngTarget = ws2.rows(rowsToFormat1(i))
        rngSource1.Copy
        rngTarget.PasteSpecial Paste:=xlPasteFormats
    Next i
    
    '    Форматирование строк по второму формату
    For i = LBound(rowsToFormat2) To UBound(rowsToFormat2)
        Set rngTarget = ws2.rows(rowsToFormat2(i))
        rngSource2.Copy
        rngTarget.PasteSpecial Paste:=xlPasteFormats
    Next i
    
    '    Отключаем выделение
    Application.CutCopyMode = False
    
    '    Сообщение об окончании форматирования
    MsgBox "Форматирование завершено!"
End Sub

Sub Module_Delete_By_Name(moduleName As String)
    ' модуль удалить по имени

    ' Иногда удаления не происходит.
    ' помогает обновление проекта
    Dim dummyModule As Object
    
    On Error Resume Next
    Set dummyModule = ThisWorkbook.VBProject.VBComponents.Add(1)  ' 1 = vbext_ct_StdModule
    If Not dummyModule Is Nothing Then
        ThisWorkbook.VBProject.VBComponents.Remove dummyModule
    End If
    On Error GoTo 0

    Dim vbComp As Object ' VBComponent
    
    For Each vbComp In ThisWorkbook.VBProject.VBComponents
        If vbComp.name = moduleName Then
            
            ThisWorkbook.VBProject.VBComponents.Remove vbComp
            
            Exit For
        End If
    Next vbComp
End Sub

Private Function A22R(ByRef a2() As Variant, cell As Range) As Range
    ' массив 2мерный на лист. Array2d2Range
    Dim numRows As Long
    Dim numColumns As Long
    Dim rng As Range
    numRows = UBound(a2, 1) - LBound(a2, 1) + 1
    numColumns = UBound(a2, 2) - LBound(a2, 2) + 1
    If numRows = 1 And numColumns = 1 Then
        ' Если массив содержит только один элемент, вставляем его как значение
        cell.value = a2(LBound(a2, 1), LBound(a2, 2))
        Set rng = cell
    Else
        ' Если массив содержит более одного элемента, вставляем его как массив
        Set rng = cell.Resize(numRows, numColumns)
        rng.value = a2
    End If
    Set A22R = rng
End Function



